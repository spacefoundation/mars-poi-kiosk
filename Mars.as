package{	import away3d.arcane;	import away3d.cameras.*;	import away3d.containers.*;	import away3d.controllers.*;	import away3d.debug.*;	import away3d.entities.*;	import away3d.lights.*;	import away3d.loaders.parsers.*;	import away3d.materials.*;	import away3d.materials.lightpickers.*;	import away3d.materials.compilation.*;	import away3d.materials.methods.*;	import away3d.primitives.*;	import away3d.textures.*;	import away3d.utils.*;		import flash.display.*;	import flash.events.*;	import flash.filters.*;	import flash.geom.*;	import flash.text.*;	import flash.ui.*;		use namespace arcane;	public class Mars extends GlobeKioskBase	{		// Diffuse map for Mars surface		/* //commenting out to try skybox textures		[Embed(source="./img/mars_diffuse.png")]		public static var marsSurfaceDiffuse:Class;				[Embed(source="./img/mars_normal.png")]		public static var marsSurfaceNormals:Class;		*/				[Embed(source="./skybox/x-pos-diffuse.png")]		public static var marsXPosDiffuse:Class;				[Embed(source="./skybox/x-neg-diffuse.png")]		public static var marsXNegDiffuse:Class;				[Embed(source="./skybox/y-pos-diffuse.png")]		public static var marsYPosDiffuse:Class;				[Embed(source="./skybox/y-neg-diffuse.png")]		public static var marsYNegDiffuse:Class;				[Embed(source="./skybox/z-pos-diffuse.png")]		public static var marsZPosDiffuse:Class;				[Embed(source="./skybox/z-neg-diffuse.png")]		public static var marsZNegDiffuse:Class;		private var _mars:ObjectContainer3D;				private var atmosphereMaterial:ColorMaterial;		private var atmosphereDiffuseMethod:BasicDiffuseMethod;		private var atmosphereSpecularMethod:BasicSpecularMethod;				private var _awayStats:AwayStats;		private var _poi:PointsOfInterest;		public function Mars() {			super();					}		override protected function onSetup():void {			createLight();			createmars();			plotPOI();		}				private function createLight():void {			// Light object.			var light:PointLight = new PointLight();			light.ambientColor = 0xffffec;			light.ambient = 0.40;			light.diffuse = 2;			light.specular = 0.5;			light.x = 10000;			_lightPicker.lights = [ light ];		}		private function createmars():void {			/* //commenting out to try skybox material			// Fresnel specular method for mars surface.			var marsFresnelSpecularMethod:FresnelSpecularMethod = new FresnelSpecularMethod( true );			marsFresnelSpecularMethod.fresnelPower = 1;			marsFresnelSpecularMethod.normalReflectance = 0.1;			marsFresnelSpecularMethod.shadingModel = SpecularShadingModel.PHONG;			// Material.			var marsSurfaceTexture:BitmapTexture = Cast.bitmapTexture( marsSurfaceDiffuse );			var marsSurfaceMaterial:TextureMaterial = new TextureMaterial( marsSurfaceTexture );			marsSurfaceMaterial.normalMap = Cast.bitmapTexture( marsSurfaceNormals );			marsSurfaceMaterial.gloss = 6;			marsSurfaceMaterial.ambient = 1;			marsSurfaceMaterial.specular = .1;			marsSurfaceMaterial.lightPicker = _lightPicker;			marsSurfaceMaterial.specularMethod = marsFresnelSpecularMethod;			*/						var marsSurfaceTexture:BitmapCubeTexture = new BitmapCubeTexture(Cast.bitmapData(marsXPosDiffuse), Cast.bitmapData(marsXNegDiffuse), Cast.bitmapData(marsYPosDiffuse), Cast.bitmapData(marsYNegDiffuse), Cast.bitmapData(marsZPosDiffuse), Cast.bitmapData(marsZNegDiffuse));			var marsSurfaceMaterial:SkyBoxMaterial = new SkyBoxMaterial(marsSurfaceTexture);						atmosphereDiffuseMethod = new CompositeDiffuseMethod(modulateDiffuseMethod);			atmosphereSpecularMethod = new CompositeSpecularMethod(modulateSpecularMethod);			atmosphereSpecularMethod.shadingModel = SpecularShadingModel.PHONG;									atmosphereMaterial = new ColorMaterial(0xffecc7);			atmosphereMaterial.diffuseMethod = atmosphereDiffuseMethod;			atmosphereMaterial.specularMethod = atmosphereSpecularMethod;			atmosphereMaterial.blendMode = BlendMode.ADD;			atmosphereMaterial.lightPicker = _lightPicker;			atmosphereMaterial.specular = 0.5;			atmosphereMaterial.gloss = 5;			atmosphereMaterial.ambientColor = 0x0;			atmosphereMaterial.ambient = 1;																		// Geometry.			var marsSurfaceGeometry:SphereGeometry = new SphereGeometry( 115, 200, 120 );			// Mesh.			var marsSurfaceMesh:Mesh = new Mesh( marsSurfaceGeometry, marsSurfaceMaterial );			// Container.			_mars = new ObjectContainer3D();			_mars.rotationY = rand( 0, 360 );			_view.scene.addChild( _mars );			_mars.addChild( marsSurfaceMesh );			// mars atmosphere geometry.			/* skip for now, playing with skybox			var marsAtmosphere:Mesh = new Mesh( new SphereGeometry( 120, 200, 100 ), atmosphereMaterial );			marsAtmosphere.scaleX = -1;			_mars.addChild( marsAtmosphere );			*/									//move this			_awayStats = new AwayStats(_view);			addChild(_awayStats);		}				private function plotPOI():void {			//var degreeAngleMult:Number = 360 / _degreeMarkersCount;			var innerXYZ:Object;			var outerXYZ:Object;			var i:Number;			var poiLineSeg:LineSegment;			var poiLineSegSet:SegmentSet = new SegmentSet();						_mars.addChild(poiLineSegSet);						_poi = new PointsOfInterest();						for(i=0; i<_poi.points.length; i++) {				innerXYZ = _poi.getXYZ(_poi.points[i].xDeg, _poi.points[i].yDeg, 115);				outerXYZ = _poi.getXYZ(_poi.points[i].xDeg, _poi.points[i].yDeg, 145);				_poi.points[i].vSurface = new Vector3D(innerXYZ.x,innerXYZ.y,innerXYZ.z);				_poi.points[i].vLineEnd = new Vector3D(outerXYZ.x,outerXYZ.y,outerXYZ.z);								poiLineSeg = new LineSegment(_poi.points[i].vSurface, _poi.points[i].vLineEnd, 0xeeba99, 0xFFFFFF, 1);				poiLineSegSet.addSegment(poiLineSeg);			}		}				private function modulateDiffuseMethod(vo : MethodVO, t:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):String		{			var viewDirFragmentReg:ShaderRegisterElement = atmosphereDiffuseMethod.sharedRegisters.viewDirFragment;			var normalFragmentReg:ShaderRegisterElement = atmosphereDiffuseMethod.sharedRegisters.normalFragment;						var code:String = "dp3 " + t + ".w, " + viewDirFragmentReg + ".xyz, " + normalFragmentReg + ".xyz\n" + 							"mul " + t + ".w, " + t + ".w, " + t + ".w\n";						return code;		}				private function modulateSpecularMethod(vo : MethodVO, t:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):String		{			var viewDirFragmentReg:ShaderRegisterElement = atmosphereDiffuseMethod.sharedRegisters.viewDirFragment;			var normalFragmentReg:ShaderRegisterElement = atmosphereDiffuseMethod.sharedRegisters.normalFragment;			var temp:ShaderRegisterElement = regCache.getFreeFragmentSingleTemp();			regCache.addFragmentTempUsages(temp, 1);						var code:String = "dp3 " + temp + ", " + viewDirFragmentReg + ".xyz, " + normalFragmentReg + ".xyz\n" + 							"neg" + temp + ", " + temp + "\n" +							"mul " + t + ".w, " + t + ".w, " + temp + "\n";								regCache.removeFragmentTempUsage(temp);						return code;		}		override protected function onUpdate():void {			super.onUpdate();			_mars.rotationY += 0.05;		}		private function rand( min:Number, max:Number ):Number {			return (max - min)*Math.random() + min;		}	}}